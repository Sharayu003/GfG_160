public class LongestPalindromicSubsequence {
    public static int longestPalindromeSubseq(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];

        // Base case: Single characters are palindromic of length 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        // Filling the DP table in bottom-up manner
        for (int len = 2; len <= n; len++) { // Length of substring
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1; // Ending index

                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = 2 + dp[i+1][j-1]; // If characters match
                } else {
                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]); // Take the max excluding either character
                }
            }
        }

        return dp[0][n-1]; // Result for full string
    }

}
