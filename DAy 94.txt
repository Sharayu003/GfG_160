class GfG {
    
    // Function which traverse the tree in preorder 
    // manner and adds nodes into result.
    static void serializePreOrder(Node root, ArrayList<Integer> arr) {
        
        // Push -1 if root is null.
        if (root == null) {
            arr.add(-1);
            return;
        }
        
        // Push the root into result.
        arr.add(root.data);
        
        // Recursively traverse the 
        // left and right subtree.
        serializePreOrder(root.left, arr);
        serializePreOrder(root.right, arr);
    }

    // Main function to serialize a tree.
    static ArrayList<Integer> serialize(Node root) {
        ArrayList<Integer> arr = new ArrayList<>();
        serializePreOrder(root, arr);
        return arr;
    }

    // Function which traverse the array in preorder 
    // manner and constructs the tree.
    static Node deserializePreOrder(int[] i, ArrayList<Integer> arr) {
        
        // -1 meres null.
        if (arr.get(i[0]) == -1) {
            i[0]++;
            return null;
        }
        
        // Create the root node.
        Node root = new Node(arr.get(i[0]));
        i[0]++;
        
        // Create the left and right subtree.
        root.left = deserializePreOrder(i, arr);
        root.right = deserializePreOrder(i, arr);
        
        return root;
    }

    // Main function to deserialize a tree.
    static Node deSerialize(ArrayList<Integer> arr) {
       int[] i = {0};
       return deserializePreOrder(i, arr);
    }

    
}

