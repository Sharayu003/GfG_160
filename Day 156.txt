class Solution {
    // Trie Node definition
    static class TrieNode {
        TrieNode[] children = new TrieNode[2];
    }

    // Root of the Trie
    TrieNode root = new TrieNode();

    // Method to insert a number into Trie
    private void insert(int num) {
        TrieNode node = root;
        for (int i = 31; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if (node.children[bit] == null) {
                node.children[bit] = new TrieNode();
            }
            node = node.children[bit];
        }
    }

    // Method to get max XOR with current number
    private int getMaxXor(int num) {
        TrieNode node = root;
        int maxXor = 0;
        for (int i = 31; i >= 0; i--) {
            int bit = (num >> i) & 1;
            int toggledBit = 1 - bit;
            if (node.children[toggledBit] != null) {
                maxXor |= (1 << i);
                node = node.children[toggledBit];
            } else {
                node = node.children[bit];
            }
        }
        return maxXor;
    }

    public int maxXor(int[] arr) {
        // Insert all numbers into the Trie
        for (int num : arr) {
            insert(num);
        }

        // Find max XOR for each number
        int maxResult = 0;
        for (int num : arr) {
            maxResult = Math.max(maxResult, getMaxXor(num));
        }

        return maxResult;
    }
}
