
public class BoundaryTraversal {

    
    public static ArrayList<Integer> printBoundary(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) return result;

        result.add(root.data); // Add root node

        // Add left boundary (excluding leaf nodes)
        addLeftBoundary(root.left, result);

        // Add all leaf nodes (both from left and right subtrees)
        addLeaves(root.left, result);
        addLeaves(root.right, result);

        // Add right boundary (excluding leaf nodes and root) in reverse order
        addRightBoundary(root.right, result);

        return result;
    }

    // Add left boundary nodes (excluding leaf nodes)
    private static void addLeftBoundary(Node node, ArrayList<Integer> result) {
        while (node != null) {
            if (!isLeaf(node)) result.add(node.data);
            node = (node.left != null) ? node.left : node.right;
        }
    }

    // Add leaf nodes using DFS
    private static void addLeaves(Node node, ArrayList<Integer> result) {
        if (node == null) return;
        if (isLeaf(node)) {
            result.add(node.data);
            return;
        }
        addLeaves(node.left, result);
        addLeaves(node.right, result);
    }

    // Add right boundary nodes in reverse order (excluding leaf nodes)
    private static void addRightBoundary(Node node, ArrayList<Integer> result) {
        Stack<Integer> stack = new Stack<>();
        while (node != null) {
            if (!isLeaf(node)) stack.push(node.data);
            node = (node.right != null) ? node.right : node.left;
        }
        while (!stack.isEmpty()) {
            result.add(stack.pop());
        }
    }

    // Check if a node is a leaf node
    private static boolean isLeaf(Node node) {
        return (node.left == null && node.right == null);
    }

    
}
