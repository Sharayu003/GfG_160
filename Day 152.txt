import java.util.*;

public class Solution {
    public String findOrder(String[] words) {
        Map<Character, Set<Character>> graph = new HashMap<>();
        int[] indegree = new int[26];
        Arrays.fill(indegree, -1);  // -1 means character is not yet seen

        // Step 1: Initialize graph and mark present characters
        for (String word : words) {
            for (char c : word.toCharArray()) {
                graph.putIfAbsent(c, new HashSet<>());
                if (indegree[c - 'a'] == -1) {
                    indegree[c - 'a'] = 0;
                }
            }
        }

        // Step 2: Build the graph based on order between adjacent words
        for (int i = 0; i < words.length - 1; i++) {
            String w1 = words[i], w2 = words[i + 1];
            int len = Math.min(w1.length(), w2.length());
            boolean found = false;

            for (int j = 0; j < len; j++) {
                char c1 = w1.charAt(j), c2 = w2.charAt(j);
                if (c1 != c2) {
                    if (!graph.get(c1).contains(c2)) {
                        graph.get(c1).add(c2);
                        indegree[c2 - 'a']++;
                    }
                    found = true;
                    break;
                }
            }

            // Edge case: ["abc", "ab"] â†’ invalid order
            if (!found && w1.length() > w2.length()) {
                return "";
            }
        }

        // Step 3: Perform topological sort using Kahn's algorithm
        Queue<Character> queue = new LinkedList<>();
        for (char c : graph.keySet()) {
            if (indegree[c - 'a'] == 0) {
                queue.add(c);
            }
        }

        StringBuilder sb = new StringBuilder();
        while (!queue.isEmpty()) {
            char curr = queue.poll();
            sb.append(curr);

            for (char nei : graph.get(curr)) {
                indegree[nei - 'a']--;
                if (indegree[nei - 'a'] == 0) {
                    queue.add(nei);
                }
            }
        }

        // If not all characters are in result, cycle detected
        return sb.length() == graph.size() ? sb.toString() : "";
    }
}
