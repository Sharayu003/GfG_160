static Node rotate(Node head, int k) {
    if (head == null || head.next == null || k == 0) return head;

    Node curr = head;
    int len = 1;

    // Find length and last node in one pass
    while (curr.next != null) {
        curr = curr.next;
        len++;
    }

    // Reduce k to avoid unnecessary rotations
    k %= len;
    if (k == 0) return head; // No rotation needed

    // Make the linked list circular
    curr.next = head;

    // Find the new tail (kth node)
    curr = head;
    for (int i = 1; i < k; i++) {
        curr = curr.next;
    }

    // Update head and break the circular connection
    head = curr.next;
    curr.next = null;

    return head;
}
