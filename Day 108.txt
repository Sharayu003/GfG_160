import java.util.*;

public class SlidingWindowMaximum {
    public static ArrayList<Integer> maxSlidingWindow(int[] arr, int k) {
        ArrayList<Integer> result = new ArrayList<>();
        if (arr == null || k <= 0) return result;

        Deque<Integer> deque = new LinkedList<>(); // Stores indices of array elements

        for (int i = 0; i < arr.length; i++) {
            // Remove elements that are out of the current window
            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
                deque.pollFirst();
            }

            // Remove elements smaller than the current element from the back
            while (!deque.isEmpty() && arr[deque.peekLast()] < arr[i]) {
                deque.pollLast();
            }

            // Add current element index
            deque.offerLast(i);

            // Add maximum element of the window to result
            if (i >= k - 1) {
                result.add(arr[deque.peekFirst()]);
            }
        }

        return result;
    }

    
}
