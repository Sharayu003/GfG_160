import java.util.ArrayList;
import java.util.Stack;
import java.util.Arrays;

public class MaxOfMinForEveryWindowSize {
    public static ArrayList<Integer> maxOfMin(int[] arr, int n) {
        int[] left = new int[n];
        int[] right = new int[n];
        int[] result = new int[n + 1];  // To store max of min for every window size

        Stack<Integer> stack = new Stack<>();

        // Initialize left and right arrays
        Arrays.fill(left, -1);
        Arrays.fill(right, n);

        // Calculate left[]
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                left[i] = stack.peek();
            }
            stack.push(i);
        }

        stack.clear();

        // Calculate right[]
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                right[i] = stack.peek();
            }
            stack.push(i);
        }

        // Compute max of min for every window size
        for (int i = 0; i < n; i++) {
            int windowSize = right[i] - left[i] - 1;
            result[windowSize] = Math.max(result[windowSize], arr[i]);
        }

        // Fill missing entries in result[]
        for (int i = n - 1; i >= 1; i--) {
            result[i] = Math.max(result[i], result[i + 1]);
        }

        // Convert result[] to ArrayList<Integer>
        ArrayList<Integer> resList = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            resList.add(result[i]);
        }

        return resList;
    }

    
}
