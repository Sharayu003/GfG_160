public class Solution {
    int[] parent, rank;

    // Find with path compression
    private int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    // Union by rank
    private boolean union(int x, int y) {
        int px = find(x);
        int py = find(y);

        if (px == py) return false;  // Cycle detected

        if (rank[px] < rank[py]) {
            parent[px] = py;
        } else if (rank[py] < rank[px]) {
            parent[py] = px;
        } else {
            parent[py] = px;
            rank[px]++;
        }
        return true;
    }

    public boolean hasCycle(int V, int[][] edges) {
        parent = new int[V];
        rank = new int[V];

        // Initially, each node is its own parent
        for (int i = 0; i < V; i++) {
            parent[i] = i;
            rank[i] = 0;
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            if (!union(u, v)) {
                return true;  // Cycle found
            }
        }

        return false;  // No cycle
    }
}
