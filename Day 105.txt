import java.util.*;

class Solution {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;

    public Solution() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }

    // Add an element to the top of Stack
    public void push(int x) {
        stack.push(x);
        if (minStack.isEmpty() || x <= minStack.peek()) {
            minStack.push(x);
        }
    }

    // Remove the top element from the Stack
    public void pop() {
        if (!stack.isEmpty()) {
            int removed = stack.pop();
            if (removed == minStack.peek()) {
                minStack.pop();
            }
        }
    }

    // Returns top element of the Stack
    public int peek() {
        if (stack.isEmpty()) {
            return -1;
        }
        return stack.peek();
    }

    // Finds minimum element of Stack
    public int getMin() {
        if (minStack.isEmpty()) {
            return -1;
        }
        return minStack.peek();
    }

    public List<Integer> processQueries(int q, int[][] queries) {
        List<Integer> result = new ArrayList<>();
        for (int[] query : queries) {
            switch (query[0]) {
                case 1: // push
                    push(query[1]);
                    break;
                case 2: // pop
                    pop();
                    break;
                case 3: // peek
                    result.add(peek());
                    break;
                case 4: // getMin
                    result.add(getMin());
                    break;
            }
        }
        return result;
}